# spec for building a weewx rpm for redhat or suse systems
# License: GPLv3
# Author: (c) 2013-2024 Matthew Wall

# the operating system release number is specified externaly, so that we can
# do cross-release (but not cross-platform) packaging.
%global os_target OSREL
%global relnum RPMREVISION
%global weewx_version WEEWX_VERSION

# suse 15: python3
%if 0%{?suse_version} && "%{os_target}" == "15"
%define app_group Productivity/Scientific/Other
%define relos .suse15
%define platform suse
%define deps python3, python3-importlib_resources, python3-configobj, python3-Cheetah3, python3-Pillow, python3-pyserial, python3-usb, python3-ephem
%define python python3
%endif

# rh: python3 on redhat, fedora, centos, rocky
%if "%{_vendor}" == "redhat"
%define app_group Applications/Science
%define platform redhat
# disable shebang mangling. see https://github.com/atom/atom/issues/21937
%undefine __brp_mangle_shebangs
%if "%{os_target}" == "8"
%define relos .el8
# rh8 ships with python 3.6, which has pre-built modules required by weewx.
# weewx also requires the importlib.resource module from python 3.7, which is
# backported to python 3.6.  python 3.8, python 3.9, and python 3.11 are also
# available on rh8, but none of the modules required by weewx are available for
# those python (as of nov2023).
%define deps epel-release, python3, python3-importlib-resources, python3-configobj, python3-cheetah, python3-pillow, python3-pyserial, python3-pyusb, python3-ephem
%define python python3
%endif
%if "%{os_target}" == "9"
%define relos .el9
# rh9 ships with python 3.9, which has pre-built modules required by weewx.
# python3-cheetah, python3-pillow are in epel
# ephem is not available for redhat9
%define deps epel-release, python3, python3-configobj, python3-cheetah, python3-pillow, python3-pyserial, python3-pyusb
%define python python3
%endif
%endif

%global release %{relnum}%{?relos:%{relos}}

%global dst_code_dir %{_datadir}/weewx
%global dst_cfg_dir  %{_sysconfdir}/weewx
%global dst_user_dir %{dst_cfg_dir}/bin/user
%global dst_doc_dir  %{_datadir}/weewx-doc
%global cfg_file     %{dst_cfg_dir}/weewx.conf
%global systemd_dir  %{_unitdir}
%global udev_dir     %{_udevrulesdir}
%global sqlite_root  /var/lib/weewx
%global html_root    /var/www/html/weewx

%define entry_points weewxd weectl

Summary: weather software
Name: weewx
Version: %{weewx_version}
Release: %{release}
Group: %{app_group}
Source: %{name}-%{version}.tar.gz
URL: https://www.weewx.com
License: GPLv3
AutoReqProv: no
Requires: %{deps}
Requires(pre): /usr/bin/getent, /usr/sbin/groupadd, /usr/sbin/useradd
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-%(%{__id_u} -n)
BuildArch: noarch

%description
weewx interacts with a weather station to produce graphs, reports, and HTML
pages. weewx can upload data to weather services such as WeatherUnderground,
PWSweather.com, or CWOP.

%prep
%setup -q

%build

%install
rm -rf %{buildroot}
mkdir -p %{buildroot}%{dst_code_dir}
mkdir -p %{buildroot}%{dst_cfg_dir}
mkdir -p %{buildroot}%{dst_doc_dir}
mkdir -p %{buildroot}%{_bindir}

# rpm wants copyright and license even if no docs
cp docs_src/copyright.md %{buildroot}%{dst_doc_dir}/copyright
cp LICENSE.txt %{buildroot}%{dst_doc_dir}/license

# copy the weewx code
cp -r src/* %{buildroot}%{dst_code_dir}

# copy the ancillary files to the correct location
cp -r src/weewx_data/examples %{buildroot}%{dst_cfg_dir}
cp -r src/weewx_data/util/import %{buildroot}%{dst_cfg_dir}
cp -r src/weewx_data/util/logwatch %{buildroot}%{dst_cfg_dir}
cp -r src/weewx_data/util/rsyslog.d %{buildroot}%{dst_cfg_dir}
cp -r src/weewx_data/util/logrotate.d %{buildroot}%{dst_cfg_dir}
mkdir %{buildroot}%{dst_cfg_dir}/systemd
cp pkg/etc/systemd/system/weewx.service %{buildroot}%{dst_cfg_dir}/systemd
cp pkg/etc/systemd/system/weewx@.service %{buildroot}%{dst_cfg_dir}/systemd
mkdir %{buildroot}%{dst_cfg_dir}/udev
cp pkg/etc/udev/rules.d/weewx.rules %{buildroot}%{dst_cfg_dir}/udev

# create the weewx configuration
sed \
 -e 's:HTML_ROOT = public_html:HTML_ROOT = %{html_root}:' \
 -e 's:SQLITE_ROOT = .*:SQLITE_ROOT = %{sqlite_root}:' \
 src/weewx_data/weewx.conf > %{buildroot}%{dst_cfg_dir}/weewx.conf

# make a copy of the generic configuration file
cp %{buildroot}%{dst_cfg_dir}/weewx.conf %{buildroot}%{dst_cfg_dir}/weewx.conf-%{weewx_version}

# create the entry points
for f in %{entry_points}; do \
    sed \
 -e 's%WEEWX_BINDIR=.*%WEEWX_BINDIR=/usr/share/weewx%' \
 -e 's%WEEWX_PYTHON=.*%WEEWX_PYTHON=%{python}%' \
 bin/$f > %{buildroot}%{_bindir}/$f; \
done


%pre
# if there is already a database directory, then use ownership of that to
# determine what user/group we should use for permissions and running.
# otherwise, use 'weewx' for user and group.
WEEWX_HOME="${WEEWX_HOME:-/var/lib/weewx}"
WEEWX_USER="${WEEWX_USER:-weewx}"
WEEWX_GROUP="${WEEWX_GROUP:-weewx}"
if [ -d %{sqlite_root} ]; then
    TMP_USER=$(stat -c "%%U" %{sqlite_root})
    if [ "$TMP_USER" != "root" -a "$TMP_USER" != "weewx" -a "$TMP_USER" != "UNKNOWN" ]; then
        WEEWX_USER=$TMP_USER
        WEEWX_GROUP=$(stat -c "%%G" %{sqlite_root})
    fi
fi

# create the weewx user and group if they do not yet exist
if ! /usr/bin/getent group | grep -q "^$WEEWX_GROUP"; then
    echo -n "Adding system group $WEEWX_GROUP..."
    /usr/sbin/groupadd -r $WEEWX_GROUP > /dev/null
    echo "done"
fi
if ! /usr/bin/getent passwd | grep -q "^$WEEWX_USER"; then
    echo -n "Adding system user $WEEWX_USER..."
    /usr/sbin/useradd -r -g $WEEWX_GROUP -M -d $WEEWX_HOME -s /sbin/nologin $WEEWX_USER > /dev/null
    echo "done"
fi

# add the user doing the install to the weewx group, if appropriate
if [ "$WEEWX_GROUP" != "root" ]; then
    # see who is running the installation
    inst_user=$USER
    if [ "$SUDO_USER" != "" ]; then
        inst_user=$SUDO_USER
    fi
    # put the user who is doing the installation into the weewx group,
    # but only if it is not root or the weewx user.
    if [ "$inst_user" != "root" -a "$inst_user" != "$WEEWX_USER" ]; then
        # if user is already in the group, then skip it
        if ! /usr/bin/getent group $WEEWX_GROUP | grep -q $inst_user; then
            echo "Adding user $inst_user to group $WEEWX_GROUP"
            usermod -aG $WEEWX_GROUP $inst_user
        else
            echo "User $inst_user is already in group $WEEWX_GROUP"
        fi
    fi
fi

if [ $1 -gt 1 ]; then
  # this is an upgrade
  if [ -f %{cfg_file} ]; then
    echo Saving previous config as %{cfg_file}.prev
    cp -p %{cfg_file} %{cfg_file}.prev
  fi
fi



%post
precompile() {
    rc=$(%{python} -m compileall -q -x 'user' %{dst_code_dir})
    if [ "$rc" != "" ]; then
        echo "Pre-compile failed!"
        echo "$rc"
    fi
}

# get the version number from the specified file, without the rpm revisions
get_conf_version() {
    v=$(grep '^version.*=' $1 | sed -e 's/\s*version\s*=\s*//' | sed -e 's/-.*//')
    if [ "$v" = "" ]; then
        # someone might have messed with the version string
        v="xxx"
    fi
    echo $v
}

set_permissions() {
    usr=$1
    grp=$2
    dir=$3
    find $3 -type f -exec chmod 664 {} \;
    find $3 -type d -exec chmod 2775 {} \;
    chmod 2775 $dir
    chown -R $usr $dir
    chgrp -R $grp $dir
}

# timestamp for files we must move aside
ts=`/usr/bin/date +"%%Y%%m%%d%%H%%M%%S"`

# figure out which user should own everything
WEEWX_USER="${WEEWX_USER:-weewx}"
WEEWX_GROUP="${WEEWX_GROUP:-weewx}"
if [ -d %{sqlite_root} ]; then
    TMP_USER=$(stat -c "%%U" %{sqlite_root})
    if [ "$TMP_USER" != "root" -a "$TMP_USER" != "weewx" -a "$TMP_USER" != "UNKNOWN" ]; then
        WEEWX_USER=$TMP_USER
        WEEWX_GROUP=$(stat -c "%%G" %{sqlite_root})
    fi
fi

# insert values into the defaults file (used by the entry points)
dflts=/etc/default/weewx
if [ -f $dflts ]; then
    mv $dflts ${dflts}-$ts
fi
echo "WEEWX_PYTHON=python3" > $dflts
echo "WEEWX_BINDIR=/usr/share/weewx" >> $dflts

# see which init system (if any) is running
pid1=none
if [ -d /run/systemd/system ]; then
  pid1=systemd
fi

# install the init files
if [ -d %{systemd_dir} ]; then
  for f in weewx.service weewx@.service; do
    sed \
 -e "s/User=.*/User=${WEEWX_USER}/" \
 -e "s/Group=.*/Group=${WEEWX_GROUP}/" \
 %{dst_cfg_dir}/systemd/$f > %{systemd_dir}/$f
  done
  if [ "$pid1" = "systemd" ]; then
      systemctl daemon-reload > /dev/null 2>&1 || :
  fi
fi

# install the udev rules
if [ -d %{udev_dir} ]; then
    sed \
 -e "s/GROUP=\"weewx\"/GROUP=\"${WEEWX_GROUP}\"/" \
 %{dst_cfg_dir}/udev/weewx.rules > %{udev_dir}/60-weewx.rules
fi

# copy the skins if there are not already skins in place
if [ ! -d %{dst_cfg_dir}/skins ]; then
    cp -rp %{dst_code_dir}/weewx_data/skins %{dst_cfg_dir}
fi

# create the user extensions directory if one does not already exist
if [ ! -d %{dst_user_dir} ]; then
    mkdir -p %{dst_user_dir}
    cp %{dst_code_dir}/weewx_data/bin/user/__init__.py %{dst_user_dir}
    cp %{dst_code_dir}/weewx_data/bin/user/extensions.py %{dst_user_dir}
fi

# create database directory
mkdir -p %{sqlite_root}
set_permissions $WEEWX_USER $WEEWX_GROUP %{sqlite_root}

# create the reports directory
mkdir -p %{html_root}
set_permissions $WEEWX_USER $WEEWX_GROUP %{html_root}

if [ "$1" = "1" ]; then
  # this is a new installation
  # create a sane configuration file with simulator as the station type
  /usr/bin/weectl station reconfigure --config=%{cfg_file} --driver=weewx.drivers.simulator --no-prompt --no-backup > /dev/null
  # pre-compile the python code
  precompile
  # ensure correct ownership of configuration, skins, and extensions
  set_permissions $WEEWX_USER $WEEWX_GROUP %{dst_cfg_dir}
  if [ "$pid1" = "systemd" ]; then
    systemctl enable weewx > /dev/null 2>&1 || :
    systemctl start weewx > /dev/null 2>&1 || :
  fi
elif [ $1 -gt 1 ]; then
  # this is an upgrade
  # upgrade a copy of the previous config to create the upgraded version, but
  # do not touch the user's configuration.
  #   weewx.conf          - user's conf (old)
  #   weewx.conf-new      - new conf for this weewx version
  #   weewx.conf-old-new  - user's conf upgraded to this weewx version
  #   weewx.conf.rpmnew   - new conf from this rpm (created by rpm rules)
  if [ -f %{cfg_file}.prev ]; then
    OLDVER=$(get_conf_version %{cfg_file}.prev)
    if [ -f %{cfg_file}-%{weewx_version} ]; then
      MNT=${OLDVER}-%{weewx_version}
      echo Creating maintainer config file as %{cfg_file}-$MNT
      cp -p %{cfg_file}.prev %{cfg_file}-$MNT
      /usr/bin/weectl station upgrade --config=%{cfg_file}-$MNT --dist-config=%{cfg_file}-%{weewx_version} --what=config --no-backup --yes > /dev/null
    fi
  fi
  # if this is an upgrade from V4, copy any extensions to the V5 location
  if [ -d /usr/share/weewx/user ]; then
    echo "Copying old extensions to /etc/weewx/bin/user"
    cp -rp /usr/share/weewx/user/* /etc/weewx/bin/user
    echo "Moving old extensions to /usr/share/weewx/user-$ts"
    mv /usr/share/weewx/user /usr/share/weewx/user-$ts
  fi
  # pre-compile the python code
  precompile
  # ensure correct ownership of configuration, skins, and extensions
  set_permissions $WEEWX_USER $WEEWX_GROUP %{dst_cfg_dir}
  # do a full restart of weewx
  if [ "$pid1" = "systemd" ]; then
    systemctl stop weewx > /dev/null 2>&1 || :
    systemctl start weewx > /dev/null 2>&1 || :
  fi
fi


%preun
# 0 remove last version
# 1 first install
# 2 upgrade

# see which init system (if any) is running
pid1=none
if [ -d /run/systemd/system ]; then
  pid1=systemd
fi

if [ "$1" = "0" ]; then
  # this is an uninstall, so stop and remove everything
  if [ "$pid1" = "systemd" ]; then
    systemctl stop weewx > /dev/null 2>&1 || :
    systemctl disable weewx > /dev/null 2>&1 || :
    for f in weewx.service weewx@.service; do
	if [ -f %{systemd_dir}/$f ]; then
	    rm -f %{systemd_dir}/$f
	fi
    done
  fi
  # remove udev rules
  if [ -f %{udev_dir}/60-weewx.rules ]; then
      rm -f %{udev_dir}/60-weewx.rules
  fi
  # remove any bytecompiled code
  find /usr/share/weewx -name '*.pyc' -delete
  find /usr/share/weewx -name __pycache__ -delete
  find /etc/weewx/bin -name '*.pyc' -delete
  find /etc/weewx/bin -name __pycache__ -delete
fi
# otherwise this is a first install or upgrade, so do nothing


%clean
rm -rf %{buildroot}

%files
%defattr(-,root,root)
%attr(0755,root,root) %{_bindir}/weewxd
%attr(0755,root,root) %{_bindir}/weectl
%{dst_code_dir}/
%doc %{dst_doc_dir}/
%config(noreplace) %{dst_cfg_dir}/

%changelog
